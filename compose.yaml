# =============================================================================
# Docker Compose File Conventions
# =============================================================================
#
# This file follows specific conventions for consistency and maintainability.
# These conventions are designed to work seamlessly with the `compose` wrapper
# script, which provides simplified commands and enhanced functionality.
#
# WHY FOLLOW THESE CONVENTIONS:
#   - The `compose` script validates that services have explicit profiles
#   - Status labels enable `compose status` to show connection information
#   - Environment variable patterns allow easy override via .env files
#   - Profile system enables `compose up`, `compose up all`, `compose up db` etc.
#   - Consistent field ordering makes the file easier to scan and maintain
#   - Following conventions ensures the wrapper script works correctly
#
# SERVICE FIELD ORDER (follow this sequence for all services):
#   1. profiles      - Service grouping (MUST be explicit for every service)
#   2. image/build   - Base image or build context
#   3. depends_on    - Service startup dependencies (if needed)
#   4. command/entrypoint - Runtime execution overrides (if needed)
#   5. environment   - Configuration via environment variables
#   6. ports         - Network port mappings (often reference env vars)
#   7. volumes       - Data persistence and config file mounts
#   8. networks      - Network configuration (if custom networks needed)
#   9. restart       - Container restart policy
#   10. labels       - Metadata for tooling and status information
#
# ENVIRONMENT VARIABLES:
#   - All configurable values use ${VAR:-default} syntax
#   - Port variables: <SERVICE>_PORT (e.g., PG_PORT, GRAFANA_PORT)
#   - Image variables: <SERVICE>_IMAGE (e.g., POSTGRES_IMAGE, GRAFANA_IMAGE)
#   - Credential variables: <SERVICE>_CRED_<TYPE> (e.g., PG_CRED_USERNAME)
#   - Override via .env, .env.local, or shell environment
#
# PROFILE SYSTEM:
#   - Every service MUST have explicit profiles set
#   - "default": Services for daily development (core services needed for development)
#   - "all": All services including observability stack
#   - "db": Database services (postgres, pgadmin, redis, etc.)
#   - "observability": Observability services (grafana, prometheus, loki, tempo, otel-collector)
#   - Custom profiles: Add project-specific profiles as needed (api, frontend, cache, etc.)
#
# RESTART POLICY:
#   - Use "restart: unless-stopped" for all services (infrastructure approach)
#   - Services stay running across Docker daemon restarts
#   - Respects manual stops (docker compose stop/down)
#   - Alternative: Omit restart for actively developed services to make crashes visible
#   - Benefits: Consistent behavior, survives system reboots, reliable development environment
#
# NAMING CONVENTIONS:
#   - No explicit container_name - let Docker Compose auto-generate
#   - Use descriptive service names that match their function
#   - Prefer named volumes over bind mounts for data persistence
#   - Add :ro flag for read-only mounts
#
# STATUS LABELS:
#   - status.url.<type> for connection URLs (ui, api, jdbc, etc.)
#   - status.cred.<type> for credential information (username, password, etc.)
#   - Include environment variable defaults in labels for proper resolution
#
# =============================================================================

services:
  # MCP Services
  everything-sse:
    profiles: ["mcp", "default", "all"]
    build:
      context: ./docker/mcp
      dockerfile: Dockerfile
    image: mcp-everything:latest
    command: ["/app/entry-point.sh", "sse"]
    ports:
      - "${MCP_SSE_PORT:-3001}:3001"  # SSE server, configurable via MCP_SSE_PORT
    restart: unless-stopped
    labels:
      - "status.url.sse=http://localhost:${MCP_SSE_PORT:-3001}/sse"
      - "status.url.inspector=everything-sse:3001"

  everything-streamable:
    profiles: ["mcp", "default", "all"]
    build:
      context: ./docker/mcp
      dockerfile: Dockerfile
    image: mcp-everything:latest
    command: ["/app/entry-point.sh", "streamableHttp"]
    ports:
      - "${MCP_STREAMABLE_PORT:-4001}:3001"  # Streamable HTTP server, configurable via MCP_STREAMABLE_PORT
    restart: unless-stopped
    labels:
      - "status.url.streamable=http://localhost:${MCP_STREAMABLE_PORT:-4001}/mcp"
      - "status.url.inspector=everything-streamable:3001"

  mcp-inspector:
    profiles: ["mcp", "default", "all"]
    build:
      context: ./docker/mcp
      dockerfile: Dockerfile
    image: mcp-everything:latest
    command: ["/app/entry-point.sh", "inspector"]
    ports:
      - "${MCP_INSPECTOR_PORT:-6274}:6274"  # Inspector GUI, configurable via MCP_INSPECTOR_PORT
      - "${MCP_INSPECTOR_WS_PORT:-6277}:6277"  # Inspector WebSocket, configurable via MCP_INSPECTOR_WS_PORT
    restart: unless-stopped
    labels:
      - "status.url.ui=http://localhost:${MCP_INSPECTOR_PORT:-6274}"
      - "status.url.websocket=ws://localhost:${MCP_INSPECTOR_WS_PORT:-6277}"

  # Database Services
  postgres:
    profiles: ["db", "default", "all"]
    image: "${POSTGRES_IMAGE:-postgres:17}"
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "password"
      PGDATA: "/data/postgres"
    ports:
      - "${PG_PORT:-15432}:5432"  # PostgreSQL port, configurable via PG_PORT
    volumes:
      - postgres:/data/postgres
      - ./docker/db/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    labels:
      - "status.url.jdbc=jdbc:postgresql://localhost:${PG_PORT:-15432}/mcp_dev"
      - "status.url.psql=postgresql://postgres:password@localhost:${PG_PORT:-15432}/postgres"
      - "status.cred.username=postgres"
      - "status.cred.password=password"

  pgadmin:
    profiles: ["db", "default", "all"]
    image: "${PGADMIN_IMAGE:-dpage/pgadmin4:9.6}"
    depends_on:
      - postgres
    entrypoint:
      - "/bin/sh"
      - "-c"
      - "/bin/echo 'postgres:5432:*:postgres:password' > /tmp/pgpassfile && chmod 600 /tmp/pgpassfile && /entrypoint.sh"
    environment:
      PGADMIN_DEFAULT_EMAIL: "admin@example.com"
      PGADMIN_DEFAULT_PASSWORD: "admin"
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
    ports:
      - "${PGADMIN_PORT:-15433}:80"  # pgAdmin port, configurable via PGADMIN_PORT
    volumes:
      - pgadmin:/var/lib/pgadmin
      - ./docker/db/pgadmin/pgadmin_servers.json:/pgadmin4/servers.json:ro
    restart: unless-stopped
    labels:
      - "status.url.ui=http://localhost:${PGADMIN_PORT:-15433}"
      - "status.cred.username=admin@example.com"
      - "status.cred.password=admin"

  # Observability Services
  loki:
    profiles: ["observability", "all"]
    image: "${LOKI_IMAGE:-grafana/loki:3.5.0}"
    command:
      - -config.file=/etc/loki/local-config.yaml
    ports:
      - "${LOKI_PORT:-3100}:3100"  # Loki HTTP API, configurable via LOKI_PORT
    volumes:
      - loki:/loki
    restart: unless-stopped
    labels:
      - "status.url.http=http://localhost:${LOKI_PORT:-3100}/metrics"
      - "status.url.api=http://localhost:${LOKI_PORT:-3100}"

  tempo:
    profiles: ["observability", "all"]
    image: "${TEMPO_IMAGE:-grafana/tempo:2.7.2}"
    command:
      - -config.file=/etc/tempo.yaml
    ports:
      - "${TEMPO_PORT:-3200}:3200"  # Tempo OTLP HTTP, configurable via TEMPO_PORT
      - "${TEMPO_ZIPKIN_PORT:-9411}:9411"  # Tempo Zipkin HTTP, configurable via TEMPO_ZIPKIN_PORT
    volumes:
      - ./docker/observability/config/tempo.yaml:/etc/tempo.yaml:ro
    restart: unless-stopped
    labels:
      - "status.url.otlp=http://localhost:${TEMPO_PORT:-3200}"
      - "status.url.zipkin=http://localhost:${TEMPO_ZIPKIN_PORT:-9411}"

  otel-collector:
    profiles: ["observability", "all"]
    image: "${OTEL_COLLECTOR_IMAGE:-ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.125.0}"
    command:
      - "--config=/etc/otel/config.yaml"
    ports:
      - "${OTEL_COLLECTOR_GRPC_PORT:-4317}:4317"  # OTLP gRPC, configurable via OTEL_COLLECTOR_GRPC_PORT
      - "${OTEL_COLLECTOR_HTTP_PORT:-4318}:4318"  # OTLP HTTP, configurable via OTEL_COLLECTOR_HTTP_PORT
    volumes:
      - ./docker/observability/config/otel-collector.yaml:/etc/otel/config.yaml:ro
    restart: unless-stopped
    labels:
      - "status.url.grpc=grpc://localhost:${OTEL_COLLECTOR_GRPC_PORT:-4317}"
      - "status.url.http=http://localhost:${OTEL_COLLECTOR_HTTP_PORT:-4318}"

  prometheus:
    profiles: ["observability", "all"]
    image: "${PROMETHEUS_IMAGE:-prom/prometheus:v3.3.1}"
    command:
      - --enable-feature=exemplar-storage
      - --web.enable-remote-write-receiver
      - --config.file=/etc/prometheus/prometheus.yaml
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"  # Prometheus Web UI, configurable via PROMETHEUS_PORT
    volumes:
      - prometheus:/prometheus
      - ./docker/observability/config/prometheus.yaml:/etc/prometheus/prometheus.yaml:ro
    restart: unless-stopped
    labels:
      - "status.url.ui=http://localhost:${PROMETHEUS_PORT:-9090}"
      - "status.url.api=http://localhost:${PROMETHEUS_PORT:-9090}/api/v1"

  grafana:
    profiles: ["observability", "all"]
    image: "${GRAFANA_IMAGE:-grafana/grafana:12.0.0}"
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - "${GRAFANA_PORT:-3000}:3000"  # Grafana Web UI, configurable via GRAFANA_PORT
    volumes:
      - ./docker/observability/grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      - ./docker/observability/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./docker/observability/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/observability/grafana/provisioning/alerting:/etc/grafana/provisioning/alerting:ro
    restart: unless-stopped
    labels:
      - "status.url.ui=http://localhost:${GRAFANA_PORT:-3000}"
      - "status.cred.anonymous=enabled (admin access)"

# Top-level volumes declared at end for visibility
volumes:
  postgres:
  pgadmin:
  loki:
  prometheus: