#!/usr/bin/env bash
# shellcheck disable=SC2034,SC1090
#==============================================================================
# MCP Everything Stack Container Manager
#==============================================================================
#
# This script provides a simple interface to manage the MCP everything stack
# containers using Docker Compose. It supports the following commands:
#
# - build: Build the MCP everything Docker image
# - start: Start the MCP stack containers in detached mode
# - status: Display container status and connection information
# - stop: Stop the running containers
# - clean: Stop containers and remove all associated volumes
# - logs: Show logs from all or specific containers
#
# The script handles port conflicts by detecting if the configured ports
# are already in use by other containers, and provides options to resolve
# these conflicts.
#
#==============================================================================

# Enable strict error handling:
# -e: Exit immediately if a command exits with non-zero status
# -E: Inherit ERR trap for functions
# -u: Treat unset variables as errors
# -o pipefail: Return value of a pipeline is the value of the last command to exit with non-zero status
set -Eeuo pipefail

# Set Internal Field Separator to newline and tab for safer iteration over outputs
IFS=$'\n\t'

#------------------------------------------------------------------------------
# Constants
#------------------------------------------------------------------------------
# ANSI color codes for formatted output
# These are used to make the script output more readable and visually appealing
readonly GREEN=$'\e[0;32m'   # Used for success messages and start command
readonly RED=$'\e[0;31m'     # Used for error messages and clean command
readonly YELLOW=$'\e[0;33m'  # Used for warnings, section headers, and stop/fix commands
readonly BLUE=$'\e[0;34m'    # Used for info messages, main headers, and status command
readonly BOLD=$'\e[1m'       # Used for emphasizing text like command names and labels
readonly NC=$'\e[0m'         # No Color - used to reset formatting

#------------------------------------------------------------------------------
# Logging helpers
#------------------------------------------------------------------------------
# Function: log
# Description: Prints a formatted message with color and a prefix based on the log level
# Parameters:
#   $1 - Log level: info, success, warn, error, header, or section
#   $2+ - The message to display
# Usage examples:
#   log info "Starting containers"
#   log error "Failed to start containers"
#   log success "Containers started successfully"
log() { # (level, msg)
  local clr pre
  # Set color and prefix based on log level
  case $1 in
    info)    clr=$BLUE  ; pre="> ";;    # Blue arrow for information
    success) clr=$GREEN ; pre="✓ ";;    # Green checkmark for success
    warn)    clr=$YELLOW; pre="! ";;    # Yellow exclamation for warnings
    error)   clr=$RED   ; pre="✗ ";;    # Red X for errors
    header)  clr=$BLUE  ; pre="== ";;   # Blue double equals for main headers
    section) clr=$YELLOW; pre="-- ";;   # Yellow double dash for section headers
  esac
  shift  # Remove the level parameter, leaving only the message
  # Print the message with color and prefix
  printf "%b%s%b\n" "$clr" "$pre$*" "$NC"
}

# Function: require_cmd
# Description: Checks if a command exists, exits with error if not found
# Parameters:
#   $1 - The command to check for
# Returns:
#   0 if command exists, exits with error code 1 if not
# Usage example:
#   require_cmd docker
require_cmd() { command -v "$1" &>/dev/null || { log error "Command '$1' not found"; exit 1; }; }

#------------------------------------------------------------------------------
# Compose helpers
#------------------------------------------------------------------------------
# Function: find_compose_file
# Description: Searches for Docker Compose files with different naming conventions in a directory
# Parameters:
#   $1 - Directory to search in
# Returns:
#   Path to the first found Docker Compose file, or nothing if none found
# Usage example:
#   compose_file=$(find_compose_file "/path/to/dir")
find_compose_file() { # (dir)
  # Check for different Docker Compose file naming conventions
  local v; for v in docker-compose.yaml docker-compose.yml compose.yaml compose.yml; do
    # If file exists, output its path and exit the function
    [[ -f "$1/$v" ]] && { echo "$1/$v"; return; }
  done
  # No Docker Compose file found (implicit return)
}

# Function: docker_compose
# Description: Wrapper for docker compose command that uses the project's compose file
# Parameters:
#   $@ - Arguments to pass to docker compose
# Usage example:
#   docker_compose up -d
docker_compose() { docker compose -f "$COMPOSE_FILE" "$@"; }

# Function: detect_conflict
# Description: Detects if a port is already in use by another container
# Parameters:
#   $1 - Port number to check
# Returns:
#   Name of the container using the port, or nothing if port is free
# Usage example:
#   container=$(detect_conflict "3000")
detect_conflict() { docker ps --filter "publish=$1" --format "{{.Names}}"; }

# Function: shutdown_conflict
# Description: Shuts down a conflicting container, using Docker Compose if possible
# Parameters:
#   $1 - Name of the container to shut down
# Usage example:
#   shutdown_conflict "grafana-container"
shutdown_conflict() { # (container)
  local cnt=$1 dir file
  # Try to get the Docker Compose project directory from container labels
  dir=$(docker inspect "$cnt" -f '{{index .Config.Labels "com.docker.compose.project.working_dir"}}' 2>/dev/null || true)
  # If directory found, try to find a Docker Compose file in it
  file="${dir:+$(find_compose_file "$dir" || true)}"

  # If Docker Compose file found, use docker compose down
  if [[ -n $file ]]; then
    log info "Stopping $cnt via docker compose -f $file down"
    docker compose -f "$file" down
  # Otherwise, use docker stop for the individual container
  else
    log info "Stopping $cnt via docker stop"
    docker stop "$cnt"
  fi
}

# Function: show_port_conflicts
# Description: Displays information about port conflicts and how to resolve them
# Usage example:
#   show_port_conflicts
show_port_conflicts() {
  local port cnt dir file
  # Check ports for conflicts
  for port in "${PORTS[@]}"; do
    # If port is in use by another container
    if cnt=$(detect_conflict "$port"); [[ -n $cnt ]]; then
      log warn "Port $port is already used by container: $cnt"
      # Try to get the Docker Compose project directory
      dir=$(docker inspect "$cnt" -f '{{index .Config.Labels "com.docker.compose.project.working_dir"}}' 2>/dev/null || true)
      # If directory found, try to find a Docker Compose file in it
      file="${dir:+$(find_compose_file "$dir" || true)}"

      # Show appropriate command to stop the conflicting container
      if [[ -n $file ]]; then
        log info "→ Stop it with: docker compose -f $file down"
      else
        log info "→ Stop it with: docker stop $cnt"
      fi
    fi
  done
  # Show quick fix options
  log info "Quick fix: ./compose fix"
}

#------------------------------------------------------------------------------
# Connection info display
#------------------------------------------------------------------------------
# Function: show_connections
# Description: Displays connection information for the MCP stack services
# Usage example:
#   show_connections
show_connections() {
  # Display section header
  log section "Connection Info"
  local lbl pad="%-20s"

  # Check if MCP Inspector container is running
  if docker_compose ps --services --filter status=running | grep -q mcp-inspector; then
    # Display Inspector GUI URL with a green checkmark
    printf "${GREEN}✓ ${BOLD}${pad}${NC}: %s\n" "Inspector GUI" "http://localhost:6274"
    printf "${GREEN}✓ ${BOLD}${pad}${NC}: %s\n" "Inspector Proxy" "WebSocket on :6277"
  else
    # Display warning if Inspector is not running
    log warn "MCP Inspector not running"
  fi

  # Check if SSE server container is running
  if docker_compose ps --services --filter status=running | grep -q everything-sse; then
    # Display SSE server URL with a green checkmark
    printf "${GREEN}✓ ${BOLD}${pad}${NC}: %s\n" "SSE Server" "http://localhost:3001/sse"
    printf "${GREEN}  ${pad}  ${NC}  ${YELLOW}Inspector URL${NC}: everything-sse:3001\n" ""
  else
    # Display warning if SSE server is not running
    log warn "SSE Server not running"
  fi

  # Check if Streamable HTTP server container is running
  if docker_compose ps --services --filter status=running | grep -q everything-streamable; then
    # Display Streamable server URL with a green checkmark
    printf "${GREEN}✓ ${BOLD}${pad}${NC}: %s\n" "Streamable Server" "http://localhost:4001/mcp"
    printf "${GREEN}  ${pad}  ${NC}  ${YELLOW}Inspector URL${NC}: everything-streamable:3001\n" ""
  else
    # Display warning if Streamable server is not running
    log warn "Streamable Server not running"
  fi

  # Show host connection info
  echo
  log info "To connect Inspector to services on your Mac:"
  log info "→ Use: http://host.docker.internal:PORT"
  log info "→ Example: http://host.docker.internal:3001"
}

#------------------------------------------------------------------------------
# Build function
#------------------------------------------------------------------------------
# Function: build_image
# Description: Builds the MCP everything Docker image
# Usage example:
#   build_image
build_image() {
  log header "Building MCP Everything Docker image"
  if docker build -t mcp-everything:latest "$SCRIPT_DIR/docker"; then
    log success "Docker image built successfully"
  else
    log error "Failed to build Docker image"
    exit 1
  fi
}

#------------------------------------------------------------------------------
# Usage
#------------------------------------------------------------------------------
# Function: usage
# Description: Displays usage information for the script
# Usage example:
#   usage
usage() {
  # Display the main usage header with bold formatting
  printf "${BOLD}Usage:${NC} ./compose <command>\n\n"
  printf "Commands:\n"
  # List all available commands with color coding matching their function
  printf "  ${BLUE}build${NC}         Build the MCP everything Docker image\n"
  printf "  ${GREEN}up${NC}            Start MCP stack containers\n"
  printf "  ${BLUE}status${NC}        Show status & connection info\n"
  printf "  ${YELLOW}down${NC}          Stop containers\n"
  printf "  ${RED}clean${NC}         Stop containers & remove volumes\n"
  printf "  ${YELLOW}fix${NC}           Detect & fix port conflicts\n"
  printf "  ${BLUE}logs${NC}          Show container logs (optionally specify service)\n"
  printf "\nExamples:\n"
  printf "  ./compose build\n"
  printf "  ./compose up\n"
  printf "  ./compose logs mcp-inspector\n"
  printf "  ./compose logs --tail 50\n"
}

#------------------------------------------------------------------------------
# Environment setup
#------------------------------------------------------------------------------
# Check if Docker is installed
require_cmd docker

# Get the absolute path to the directory containing this script
# This ensures the script works correctly regardless of where it's called from
readonly SCRIPT_DIR="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" && pwd)"

# Find the Docker Compose file in the current directory (project root)
# Exit with error if no compose file is found
COMPOSE_FILE="$(find_compose_file "$SCRIPT_DIR")" || { log error "No compose file in $SCRIPT_DIR"; exit 1; }

# Define ports used by the MCP stack services
readonly PORTS=(
  "3001"  # SSE Server
  "4001"  # Streamable HTTP Server
  "6274"  # MCP Inspector GUI
  "6277"  # MCP Inspector WebSocket
)

#------------------------------------------------------------------------------
# Main command handler
#------------------------------------------------------------------------------
# Get the command from the first argument, or empty string if no argument provided
cmd=${1-}

# Process the command using a case statement
case $cmd in
  # Build command: Build the MCP everything Docker image
  build)
    build_image
    ;;

  # Up command: Start MCP stack containers
  up)
    log header "Starting containers"
    # Try to start the containers in detached mode
    if docker_compose up -d; then
      # If successful, show success message and container status
      log success "Containers started"
      docker_compose ps
      show_connections
    else
      # If failed (likely due to port conflict), show error and port conflict info
      log error "Failed to start – port conflict detected"
      show_port_conflicts
      exit 1  # Exit with error code
    fi
    ;;

  # Down command: Stop the running containers
  down)
    log header "Stopping containers"
    docker_compose down --remove-orphans  # Stop containers and remove networks and orphans
    ;;

  # Clean command: Stop containers and remove volumes (data cleanup)
  clean)
    log header "Cleaning containers & volumes"
    docker_compose down -v --remove-orphans  # -v flag removes volumes
    ;;

  # Status command: Show container status and connection information
  status)
    log header "Container Status"
    docker_compose ps       # Show container status
    show_connections        # Show connection information
    ;;

  # Fix command: Automatically resolve port conflicts
  fix)
    log header "Resolving Port Conflicts"
    # For each port in the MCP stack
    for p in "${PORTS[@]}"; do
      # If port is in use by a container, shut it down
      if c=$(detect_conflict "$p"); [[ -n $c ]]; then
        shutdown_conflict "$c"
      fi
    done
    ;;

  # Logs command: Show container logs
  logs)
    shift # Remove 'logs' from arguments
    log header "Container Logs"
    if [[ $# -eq 0 ]]; then
      # No specific service specified, show all logs
      docker_compose logs -f
    else
      # Show logs for specific service or with specific options
      docker_compose logs "$@"
    fi
    ;;

  # Unknown command or no command: Show usage information
  *)
    usage  # Display usage information
    exit 1  # Exit with error code
    ;;
esac